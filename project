import cv2
import numpy as np
from tensorflow.keras.models import load_model
import pandas as pd
from datetime import datetime
import time
late_cutoff_time = datetime.now().replace(hour=9,minute=0,second=0,microsecond=0)

class AttendanceSystem:
    def __init__(self):
        self.class_labels = ['Khoi Vi', 'Xuan Phu', 'Phu Huy', 'nobody']
        self.model = load_model('keras_model.h5')
        self.cap = cv2.VideoCapture(0)
        self.attendance_df = pd.DataFrame(columns=['StudentID', 'Name', 'Major', 'Timestamp'])

    def preprocess_frame(self, image):
        frame = cv2.resize(image, (224, 224), interpolation=cv2.INTER_AREA)
        frame = np.asarray(frame, dtype=np.float32).reshape(1, 224, 224, 3)
        frame = (frame / 127.5) - 1
        return frame

    def process_prediction(self, prediction):
        predicted_class_index = np.argmax(prediction)
        predicted_class_label = self.class_labels[predicted_class_index]
        confidence_score = prediction[0][predicted_class_index]
        return predicted_class_label, confidence_score

    def get_student_info(self, predicted_class_label):
        df = pd.read_csv('student_info.csv', header=0)
        filtered_df  = df[df['Name'] == predicted_class_label]
        student_info = {
            'StudentID': filtered_df ['StudentID'], 
            'Name': filtered_df ['Name'], 
            'Major': filtered_df ['Major']
        }
        return student_info

    def classify_and_save(self):

        while True:
            ret, frame = self.cap.read()
            resized_frame = self.preprocess_frame(frame)
            prediction = self.model.predict(resized_frame)
            predicted_class_label, confidence_score = self.process_prediction(prediction)
            print("Class:", predicted_class_label, end="\n")
            print("Confidence Score:", str(np.round(confidence_score * 100))[:-2], "%")
            student_info = self.get_student_info(predicted_class_label)
            # Check if the student is late
            is_late = datetime.now() > late_cutoff_time
            new_rows = {
                'StudentID': student_info['StudentID'],
                'Name': student_info['Name'],
                'Major': student_info['Major'],
                'Timestamp': datetime.now(),
                'Is_Late': is_late
            }

            
            self.attendance_df = pd.concat([self.attendance_df, pd.DataFrame(new_rows)], ignore_index=True)
            print(self.attendance_df)
            self.attendance_df.to_csv('attendance_log.csv', index=False)       
            cv2.imshow('Attendance Capture', frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        self.cap.release()
        cv2.destroyAllWindows()

    def deduplicate_attendance(self, path):
        df = pd.read_csv(path)
        df['Timestamp'] = pd.to_datetime(df['Timestamp'])
        min_timestamp_index = df.groupby('StudentID')['Timestamp'].idxmin()
        result_df = df.loc[min_timestamp_index]
        result_df.to_csv('attendance_log.csv', index=False)   


attendance_system = AttendanceSystem()
attendance_system.classify_and_save()
attendance_system.deduplicate_attendance('attendance_log.csv')


