import cv2
import numpy as np
from tensorflow.keras.models import load_model
import pandas as pd
from datetime import datetime

class_labels = ['Khoi Vi', 'Phu Huy ', 'Xuan Phu']

# Load the pre-trained model
model = load_model('keras_model.h5')

# Initialize the webcam
cap = cv2.VideoCapture(0)
def classify_and_save():
    # Create a DataFrame to store attendance information
    attendance_df = pd.DataFrame(columns=['StudentID', 'Name', 'Major', 'Timestamp'])
    while True:
        # Capture a frame from the webcam
        ret, frame = cap.read()

        # Preprocess the frame (adjust as per your model requirements)
        resized_frame = preprocess_frame(frame)

        # Perform model inference
        # Replace this with your actual inference logic based on your model
        # prediction = model.predict(preprocessed_frame)

        prediction = model.predict(resized_frame)
        # print(prediction)

        # Process the prediction (replace this with your logic)
        predicted_class_label = process_prediction(prediction)
        print('Predicted class:' + predicted_class_label)

        # predicted_class_label = 'Xuan Phu'

        # Get student information based on student_id
        student_info = get_student_info(predicted_class_label)

        print(student_info)
        new_rows = {
            'StudentID': student_info['StudentID'],
            'Name': student_info['Name'],
            'Major': student_info['Major'],
            'Timestamp': datetime.now()
        }

        attendance_df = pd.concat([attendance_df, pd.DataFrame(new_rows)], ignore_index=True)

        # Save the attendance DataFrame to an Excel file
        attendance_df.to_csv('attendance_log.csv', index=False)       

        # Display the captured frame (optional)
        cv2.imshow('Attendance Capture', frame)

        # Check for key press to exit the loop (press 'q')
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the webcam and close OpenCV windows
    cap.release()
    cv2.destroyAllWindows()

def preprocess_frame(frame):
    # Preprocess input image before applying model prediction
    resized_frame = cv2.resize(frame, (224, 224))
    resized_frame = np.expand_dims(resized_frame, axis=0)
    return resized_frame

def process_prediction(prediction):
    # Placeholder function to process the model prediction
    # Extract the class label or relevant information from the prediction
    # Return the processed information
    predicted_class_index = np.argmax(prediction)
    predicted_class_label = class_labels[predicted_class_index]
    return predicted_class_label

def get_student_info(predicted_class_label):
    # Get student info from csv file including major, student name
    df = pd.read_csv('student_info.csv', header=0)
    print(predicted_class_label)
    filtered_df  = df[df['Name'] == predicted_class_label]
    student_info = {
        'StudentID': filtered_df ['StudentID'], 
        'Name': filtered_df ['Name'], 
        'Major': filtered_df ['Major']
    }
    return student_info

classify_and_save()
